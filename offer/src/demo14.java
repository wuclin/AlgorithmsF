/**
 * 位运算
 *  m<<n表示把m左移n位，左移的时候最左边的n位被丢弃，同时在最右边补上0
 *  00001010<<2 = 00101000
 *  10001010<<3 = 01010000
 *  m>>n表示把m右移n位，右移的时候最右边的n为被丢弃，如果数字是无符号数，用0填补最左边的n位，如果是有符号，则如果是
 *  正数则补0，负数则补1
 *  00001010>>2 = 00000010
 *  10001010>>3 = 11110001
 *
 *  整数右移相当于除于2
 *
 *  一个整数减去1再和原来的整数做运算，会把该整数最右边的1变成0，一个整数的二进制表示中有多少个1
 *  就可以进行多少次操作
 */
public class demo14 {
    public int hammingWeight(int n) {
        int count = 0;

        while(n != 0){
            count++;
            n = (n-1)&n;
        }
        return count;
    }
}
